#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
//for循环，在循环语句中，只用一种循环就可以解决所有的循环问题，用的最多的循环就是for循环
//int main() {//简单for循环
//	int i = 0;
//	for (i = 1; i < 10; i++) {//for循环将初始化，判断，调整三者集中在一起，使循环变得简洁
//		printf("%d", i);
//	}
//	return 0;
//}

//int main() {
//	int i = 0;
//	for (i = 1; i < 10; i++) {
//		if (i == 5)
//			break;//break的作用还是跳出循环
//		printf("%d ", i);
//	}
//}

//int main() {
//	int i = 0;
//	for (i = 1; i < 10; i++) {
//		if (i == 5)
//			continue;//for循环中的continue语句与while中有所不同
//		//while循环中由于执行continue后i不会++，所以陷入死循环
//		//for循环中执行continue后依然会++，所以只会跳出一次循环，之后的依然会执行
//		printf("%d", i);
//	}
//	return 0;
//}

//int main() {//if语句会使for进入死循环
//	int i = 0;
//	for (i = 1; i < 10; i++) {
//		if (i = 5)//赋值操作，使得i永远不会自增
//			printf("死循环了");
//	}
//}

//int main() {//利用for循环可以很好的把数组里面的内容打印出来
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int i = 0;
//	for (i = 0; i < 10; i++) {
//		printf("%d", arr[i]);
//	}
//	return 0;
//}


//int main() {//特殊的for循环
//	for (;;) {//for循环的初始化，判断，调整都可以省略，但，判断部分省略那判断条件就是恒为真
//		printf("hh\n");
//	}
//	return 0;
//}

//int main() {//for循环的多层嵌套
//	int i = 0;
//	int j = 0;
//	for (i = 0; i < 10; i++) {
//		printf("%d\n", i);
//		for (j = 0; j < 10; j++) {
//			printf("%d ", j);
//			printf("hehe\n");//输出100条数据
//		}
//	}
//	return 0;
//}


//int main() {//for循环缺少初始化变量后的错误
//	int i = 0;
//	int j = 0;
//	for (; i < 10; i++) {//初始化为空会导致，变量值无法销毁，程序运行从int i = 0;开始
//		printf("i");
//		printf("%d\n", i);
//		for (; j < 10; j++) {//由于此处程序执行完后，j的值为10，没有销毁，导致j循环只进行了一次
//			printf("j");
//			printf("%d ", j);
//			printf("hehe\n");
//		}
//	}
//	return 0;
//}

//int main() {//for循环的变种写法
//	int x, y;
//	for (x = 0, y = 1; x < 2 && y < 5; ++x, y++) {
//		printf("hehe\n");
//		printf("%d%d", x, y);
//	}
//	return 0;
//}

//int main() {//特殊情况
//	int i = 0;
//	int k = 0;
//	for (i = 0, k = 0; k = 0; k++, i++) {//一次都不会循环，因为k=0是赋值语句，不是判断语句，k=0表示判断条件为假，所以程序不会执行
//		k++;
//	}
//	return 0;
//}

